local AST = require "lunar.ast"
local SyntaxKind = require "lunar.ast.syntax_kind"
local BaseTranspiler = require "lunar.compiler.codegen.base_transpiler"

class Transpiler << BaseTranspiler
  footer_exports = nil
  visitors = {
    -- stats
    [SyntaxKind.do_statement] = self.visit_do_statement,
    [SyntaxKind.if_statement] = self.visit_if_statement,
    [SyntaxKind.class_statement] = self.visit_class_statement,
    [SyntaxKind.while_statement] = self.visit_while_statement,
    [SyntaxKind.break_statement] = self.visit_break_statement,
    [SyntaxKind.return_statement] = self.visit_return_statement,
    [SyntaxKind.function_statement] = self.visit_function_statement,
    [SyntaxKind.variable_statement] = self.visit_variable_statement,
    [SyntaxKind.range_for_statement] = self.visit_range_for_statement,
    [SyntaxKind.expression_statement] = self.visit_expression_statement,
    [SyntaxKind.assignment_statement] = self.visit_assignment_statement,
    [SyntaxKind.generic_for_statement] = self.visit_generic_for_statement,
    [SyntaxKind.repeat_until_statement] = self.visit_repeat_until_statement,
    [SyntaxKind.declare_global_statement] = self.visit_declare_global_statement,
    [SyntaxKind.declare_package_statement] = self.visit_declare_package_statement,
    [SyntaxKind.declare_returns_statement] = self.visit_declare_returns_statement,
    [SyntaxKind.import_statement] = self.visit_import_statement,
    [SyntaxKind.export_statement] = self.visit_export_statement,

    -- exprs
    [SyntaxKind.prefix_expression] = self.visit_prefix_expression,
    [SyntaxKind.lambda_expression] = self.visit_lambda_expression,
    [SyntaxKind.member_expression] = self.visit_member_expression,
    [SyntaxKind.argument_expression] = self.visit_argument_expression,
    [SyntaxKind.function_expression] = self.visit_function_expression,
    [SyntaxKind.unary_op_expression] = self.visit_unary_op_expression,
    [SyntaxKind.binary_op_expression] = self.visit_binary_op_expression,
    [SyntaxKind.nil_literal_expression] = self.visit_nil_literal_expression,
    [SyntaxKind.function_call_expression] = self.visit_function_call_expression,
    [SyntaxKind.table_literal_expression] = self.visit_table_literal_expression,
    [SyntaxKind.number_literal_expression] = self.visit_number_literal_expression,
    [SyntaxKind.string_literal_expression] = self.visit_string_literal_expression,
    [SyntaxKind.boolean_literal_expression] = self.visit_boolean_literal_expression,
    [SyntaxKind.variable_argument_expression] = self.visit_variable_argument_expression,
    [SyntaxKind.identifier] = self.visit_identifier,
    [SyntaxKind.index_expression] = self.visit_index_expression,
    [SyntaxKind.type_assertion_expression] = self.visit_type_assertion_expression,

    -- decls
    [SyntaxKind.index_field_declaration] = self.visit_index_field_declaration,
    [SyntaxKind.member_field_declaration] = self.visit_member_field_declaration,
    [SyntaxKind.sequential_field_declaration] = self.visit_sequential_field_declaration,
    [SyntaxKind.parameter_declaration] = self.visit_parameter_declaration,
  }

  binary_op_map = {
    [AST.BinaryOpKind.addition_op] = "+",
    [AST.BinaryOpKind.subtraction_op] = "-",
    [AST.BinaryOpKind.multiplication_op] = "*",
    [AST.BinaryOpKind.division_op] = "/",
    [AST.BinaryOpKind.modulus_op] = "%",
    [AST.BinaryOpKind.power_op] = "^",
    [AST.BinaryOpKind.concatenation_op] = "..",
    [AST.BinaryOpKind.not_equal_op] = "~=",
    [AST.BinaryOpKind.equal_op] = "==",
    [AST.BinaryOpKind.less_than_op] = "<",
    [AST.BinaryOpKind.less_or_equal_op] = "<=",
    [AST.BinaryOpKind.greater_than_op] = ">",
    [AST.BinaryOpKind.greater_or_equal_op] = ">=",
    [AST.BinaryOpKind.and_op] = "and",
    [AST.BinaryOpKind.or_op] = "or",
  }

  unary_op_map = {
    [AST.UnaryOpKind.negative_op] = "-",
    [AST.UnaryOpKind.not_op] = "not ", -- space is intentional!
    [AST.UnaryOpKind.length_op] = "#",
  }

  constructor(ast)
    super()

    self.ast = ast
  end

  function transpile()
    self:visit_block(self.ast)
    self:visit_footer_exports()
    return self.source
  end

  function visit_node(node)
    local visitor = self.visitors[node.syntax_kind]
    if visitor then
      return visitor(self, node)
    end

    error(("No visitor found for SyntaxKind %d"):format(node.syntax_kind))
  end

  function visit_block(block)
    for _, stat in pairs(block) do
      self:visit_node(stat)
    end
  end

  function visit_varlist(varlist)
    for i, var in pairs(varlist) do
      self:visit_node(var)

      if i ~= #varlist then
        self:write(", ")
      end
    end
  end

  function visit_identlist(identlist)
    for i = 1, #identlist do
      if i > 1 then
        self:write(", ")
      end

      self:write(identlist[i].name)
    end
  end

  function visit_fields(fields)
    if #fields == 0 then return "" end

    self:indent()
    for _, field in pairs(fields) do
      self:writeln()
      self:iwrite()
      self:visit_field_declaration(field)
      self:write(",")
    end
    self:dedent()
  end

  function visit_params(params)
    for i, param in pairs(params) do
      self:visit_node(param)

      if i ~= #params then
        self:write(", ")
      end
    end
  end

  function visit_args(args)
    for i, expr in pairs(args) do
      self:visit_node(expr)

      if i ~= #args then
        self:write(", ")
      end
    end
  end

  function visit_exprlist(exprlist)
    for i, expr in pairs(exprlist) do
      self:visit_node(expr)

      if i ~= #exprlist then
        self:write(", ")
      end
    end
  end

  function visit_do_statement(stat)
    self:iwriteln("do")
    self:indent()
    self:visit_block(stat.block)
    self:dedent()
    self:iwriteln("end")
  end

  function visit_if_statement(stat)
    self:iwrite("if ")
    self:visit_node(stat.expr)
    self:writeln(" then")
    self:indent()
    self:visit_block(stat.block)
    self:dedent()

    for _, elseif_branch in pairs(stat.elseif_branches) do
      self:iwrite("elseif ")
      self:visit_node(elseif_branch.expr)
      self:writeln(" then")
      self:indent()
      self:visit_block(elseif_branch.block)
      self:dedent()
    end

    if stat.else_branch then
      self:iwriteln("else")
      self:indent()
      self:visit_block(stat.else_branch.block)
      self:dedent()
    end

    self:iwriteln("end")
  end

  function visit_class_statement(stat)
    self:visit_block(stat:lower())
  end

  function visit_while_statement(stat)
    self:iwrite("while ")
    self:visit_node(stat.expr)
    self:writeln(" do")
    self:indent()
    self:visit_block(stat.block)
    self:dedent()
    self:iwriteln("end")
  end

  function visit_break_statement(stat)
    self:iwriteln("break")
  end

  function visit_return_statement(stat)
    self:iwrite("return")

    if stat.exprlist then
      self:write(" ")
      self:visit_exprlist(stat.exprlist)
    end

    self:write("\n")
  end

  function visit_function_statement(stat)
    local lowered = stat:lower()

    if lowered.is_local then
      self:iwrite("local ")
    end

    self:write("function ")
    self:visit_node(lowered.base)
    self:write("(")
    self:visit_params(lowered.parameters)
    self:writeln(")")
    self:indent()
    self:visit_block(lowered.block)
    self:dedent()
    self:iwriteln("end")
  end

  function visit_variable_statement(stat)
    self:iwrite("local ")
    self:visit_identlist(stat.identlist)

    if stat.exprlist then
      self:write(" = ")
      self:visit_exprlist(stat.exprlist)
    end

    self:writeln()
  end

  function visit_identifier(node)
    self:write(node.name)
  end

  function visit_range_for_statement(stat)
    self:iwrite("for ")
    self:visit_identifier(stat.identifier)
    self:write(" = ")
    self:visit_node(stat.start_expr)
    self:write(", ")
    self:visit_node(stat.end_expr)

    if stat.incremental_expr then
      self:write(", ")
      self:visit_node(stat.incremental_expr)
    end

    self:writeln(" do")
    self:indent()
    self:visit_block(stat.block)
    self:dedent()
    self:iwriteln("end")
  end

  function visit_expression_statement(stat)
    self:iwrite()
    self:visit_node(stat.expr)
    self:writeln()
  end

  function visit_assignment_statement(stat)
    local lowered = stat:lower()

    self:iwrite()
    self:visit_varlist(lowered.variables)
    self:write(" = ")
    self:visit_exprlist(lowered.exprs)
    self:writeln()
  end

  function visit_generic_for_statement(stat)
    self:iwrite("for ")
    self:visit_identlist(stat.identifiers)
    self:write(" in ")
    self:visit_exprlist(stat.exprlist)
    self:writeln(" do")
    self:indent()
    self:visit_block(stat.block)
    self:dedent()
    self:iwriteln("end")
  end

  function visit_repeat_until_statement(stat)
    self:iwriteln("repeat")
    self:indent()
    self:visit_block(stat.block)
    self:dedent()
    self:iwrite("until ")
    self:visit_node(stat.expr)
    self:writeln()
  end

  function visit_declare_global_statement(stat)
    -- Pass
  end

  function visit_declare_package_statement(stat)
    -- Pass
  end

  function visit_declare_returns_statement(stat)
    -- Pass
  end

  function visit_import_statement(stat)
    self:visit_block(stat:lower())
  end

  function visit_export_statement(stat)
    local assignment, identifier = stat:lower()
    if not self.footer_exports then
      self.footer_exports = {}
    end
    table.insert(self.footer_exports, identifier)

    self:visit_node(assignment)
  end

  function visit_footer_exports(stat)
    if self.footer_exports then
      self:iwriteln("return {")
      self:indent()
      for i = 1, #self.footer_exports do
        self:iwrite()
        self:visit_identifier(self.footer_exports[i])
        self:writeln(",")
      end
      self:dedent()
      self:iwriteln("}")
    end
  end

  function visit_prefix_expression(expr)
    self:write("(")
    self:visit_node(expr.expr)
    self:write(")")
  end

  function visit_lambda_expression(expr)
    self:visit_function_expression(expr:lower())
  end

  function visit_member_expression(member)
    -- we'll visit left, recursively
    self:visit_node(member.base)

    -- and eventually ascend back to here
    self:write(member.has_colon and ":" or ".")
    self:write(member.member_identifier.name)
  end

  function visit_index_expression(expr)
    -- we'll visit left, recursively
    self:visit_node(expr.base)

    -- and eventually ascend back to here
    self:write("[")
    self:visit_node(expr.index)
    self:write("]")
  end

  function visit_argument_expression(arg)
    self:visit_node(arg.value)
  end

  function visit_function_expression(expr)
    local lowered = expr:lower()

    self:write("function(")
    self:visit_params(lowered.parameters)
    self:writeln(")")
    self:indent()
    self:visit_block(lowered.block)
    self:dedent()
    self:iwrite("end")
  end

  function visit_nil_literal_expression(expr)
    self:write("nil")
  end

  function visit_function_call_expression(expr)
    self:visit_node(expr.base)
    self:write("(")
    self:visit_args(expr.arguments)
    self:write(")")
  end

  function visit_unary_op_expression(expr)
    -- wrapping around parenthesis because if we have "- -1" as the input, we would get out "--1"
    self:write("(")
    self:write(self.unary_op_map[expr.operator])
    self:visit_node(expr.right_operand)
    self:write(")")
  end

  function visit_binary_op_expression(expr)
    self:visit_node(expr.left_operand)
    self:write(" ")
    self:write(self.binary_op_map[expr.operator])
    self:write(" ")
    self:visit_node(expr.right_operand)
  end

  function visit_table_literal_expression(expr)
    self:write("{")
    self:visit_fields(expr.fields)

    if #expr.fields > 0 then
      self:writeln()
      self:iwrite("}")
    else
      self:write("}")
    end
  end

  function visit_number_literal_expression(expr)
    self:write(tostring(expr.value))
  end

  function visit_string_literal_expression(expr)
    self:write(expr.value) -- already a string
  end

  function visit_boolean_literal_expression(expr)
    self:write(tostring(expr.value))
  end

  function visit_variable_argument_expression(expr)
    self:write("...")
  end

  function visit_type_assertion_expression(expr)
    self:visit_node(expr.base)
  end

  function visit_field_declaration(field)
    if field.syntax_kind == SyntaxKind.sequential_field_declaration then
      self:visit_sequential_field_declaration(field)
    elseif field.syntax_kind == SyntaxKind.member_field_declaration then
      self:visit_member_field_declaration(field)
    else
      self:visit_index_field_declaration(field)
    end
  end

  function visit_sequential_field_declaration(field)
    self:visit_node(field.value)
  end

  function visit_member_field_declaration(field)
    self:write(field.member_identifier.name)
    self:write(" = ")
    self:visit_node(field.value)
  end

  function visit_index_field_declaration(field)
    self:write("[")
    self:visit_node(field.key)
    self:write("] = ")
    self:visit_node(field.value)
  end

  function visit_parameter_declaration(param)
    self:visit_identifier(param.identifier)
  end
end

return Transpiler
